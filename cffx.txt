#include <iostream>
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include <stdbool.h>
#define maxtoken 20//单词长度
#define maxlength 10000//源程序长度
#define maxnum 1000//单词个数
using namespace std;

//词法分析程序
//首先定义种别码
/*
第一类：标识符   letter(letter | digit)*
第二类：常数    (digit)+  无穷集
第三类：保留字(32)
auto       break    case     char        const      continue
default    do       double   else        enum       extern
float      for      goto     if          int        long
register   return   short    signed      sizeof     static
struct     switch   typedef  union       unsigned   void
volatile    while

第四类：界符  ‘/*’、‘//’、 () { } [ ] " "  ' ;
第五类：运算符 <、<=、>、>=、=、+、-、*、/、^、

对所有可数符号进行编码：
<#,0>
<auto,1>
...
<while,32>
<+，33>
<-,34>
<*,35>
</,36>
<<,37>
<<=,38>
<>,39>
<>=,40>
<=,41>
<==,42>
<!=,43>
<;,44>
<(,45>
<),46>
<^,47>
<,,48>
<",49>
<',50>
<#,51>
<&,52>
<&&,53>
<|,54>
<||,55>
<%,56>
<>>,57>左移
<<<,58>右移
<[,59>
<],60>
<{,61>
<},62>
<\,63>
<.,64>
<?,65>
<:,66>
<!,67>
<~,68>
"[","]","{","}"
<常数99  ,数值>
<标识符100 ，标识符指针>


*/

/****************************************************************************************/
//全局变量，保留字表
static char reserveWord[32][20] = {
    "auto", "break", "case", "char", "const", "continue",
    "default", "do", "double", "else", "enum", "extern",
    "float", "for", "goto", "if", "int", "long",
    "register", "return", "short", "signed", "sizeof", "static",
    "struct", "switch", "typedef", "union", "unsigned", "void",
    "volatile", "while"
};
//界符运算符表
static char operatorOrDelimiter[36][10] = {
    "+", "-", "*", "/", "<", "<=", ">", ">=", "=", "==",
    "!=", ";", "(", ")", "^", ",", "\"", "\'", "$", "&",
    "&&", "|", "||", "%", ">>", "<<", "[", "]", "{",
    "}", "\\", ".", "\?", ":", "!", ";"
};

static  char IDentifierTbl[1000][50] = { "" };//标识符表
/****************************************************************************************/

//查找关键字
int searchReserve(char reserveWord[][20], char s[])
{
    int i;
    for(i=0;i<32;i++){
        if (strcmp(reserveWord[i], s) == 0)
        {//若成功查找，则返回种别码
            return i + 1;//返回种别码(第一个关键字种别码为1)
        }
    }
    return -1;//否则返回-1，代表查找不成功，即为标识符
}


//判断是否为字母
bool IsLetter(char letter)
{
    if ((letter >= 'a'&&letter <= 'z' )|| (letter >= 'A'&&letter <= 'Z')|| letter=='_')
    {
        return true;
    }
    else
    {
        return false;
    }
}


//判断是否为数字
bool IsDigit(char digit)
{
    if (digit >= '0'&&digit <= '9')
    {
        return true;
    }
    else
    {
        return false;
    }
}



//编译预处理，取出无用的字符和注释
void filterResource(char r[], int pProject)
{
    char tempString[10000];
    int count = 0,i;
    for (i = 0; i <= pProject; i++)
    {
        if (r[i] == '/' && r[i + 1] == '/')
        {//若为单行注释“//”,则去除注释后面的东西，直至遇到回车换行
            while (r[i] != '\n')
            {
                i++;//向后扫描
            }
        }
        if (r[i] == '/'&&r[i + 1] == '*')
        {//若为多行注释“/* 。。。*/”则去除该内容
            i += 2;
            while (r[i] != '*' || r[i + 1] != '/')
            {
                i++;//继续扫描
                if (r[i] == '#')
                {
                    printf("注释出错，没有找到 */，程序结束！！！\n");
                    exit(0);
                }
            }
            i += 2;//跨过“*/”
        }
        if (r[i] != '\n'&&r[i] != '\t'&&r[i] != '\v'&&r[i] != '\r')
        {//若出现无用字符，则过滤；否则加载
            tempString[count++] = r[i];
        }
    }
    tempString[count] = '\0';//当前单词接受完毕
    strcpy(r, tempString);//把当前单词复制给r
}



//分析子程序
void Scanner(int &syn, char resourceProject[], char token[], int &pProject)
{//根据DFA的状态转换图设计

    int i, count = 0;//count用来做token[]的指示器，收集有用字符
    char ch;//作为判断使用
    ch = resourceProject[pProject];
    while (ch == ' ')
    {//过滤空格，防止程序因识别不了空格而结束
        pProject++;
        ch = resourceProject[pProject];
    }
    for (i = 0; i<maxtoken; i++)
    {//初始化
        token[i] = '\0';
    }
    if (IsLetter(resourceProject[pProject]))
    {//开头为字母
        token[count++] = resourceProject[pProject];
        pProject++;
        while (IsLetter(resourceProject[pProject]) || IsDigit(resourceProject[pProject]))
        {//后跟字母或数字
            token[count++] = resourceProject[pProject];
            pProject++;
        }//识别完了一个单词
        token[count] = '\0';
        syn = searchReserve(reserveWord, token);//查表找到种别码
        if (syn == -1)
        {//若不是保留字则是标识符
            syn = 100;//标识符种别码，按名区分，同一种别码
        }
        return;
    }
    else if (IsDigit(resourceProject[pProject]))
    {//首字符为数字
        while (IsDigit(resourceProject[pProject]))
        {//后跟数字
            token[count++] = resourceProject[pProject];
            pProject++;
        }
        token[count] = '\0';//假设只有整数
        syn = 99;//常数种别码，按值区分
    }
    else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == ';' || ch == '(' || ch == ')' || ch == '^'
        || ch == ',' || ch == '\"' || ch == '\''  || ch == '$' || ch == '%' || ch == '['
        || ch == ']' || ch == '{' || ch == '}' || ch == '\\' || ch == '.' || ch == '\?' || ch == ':'|| ch == ';')
    {//若为运算符或者界符，查表得到结果
        token[0] = resourceProject[pProject];
        token[1] = '\0';
        for (i = 0; i<36; i++)
        {//查运算符界符表
            if (strcmp(token, operatorOrDelimiter[i]) == 0)
            {
                syn = 33 + i;//获得种别码,线性映射关系
                break;//查到即推出
            }
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '<')
    {//<,<=,<<
        pProject++;//超前搜索
        if (resourceProject[pProject] == '=')
        {//<=
            syn = 38;
        }
        else if (resourceProject[pProject] == '<')
        {//左移
            //pProject--;
            syn = 58;
        }
        else
        {
            pProject--;
            syn = 37;
        }
        pProject++;//指针下移
        return;
    }
    else  if (resourceProject[pProject] == '>')
    {//>,>=,>>
        pProject++;
        if (resourceProject[pProject] == '=')
        {//>=
            syn = 40;
        }
        else if (resourceProject[pProject] == '>')
        {//右移
            syn = 59;
        }
        else
        {
            pProject--;
            syn = 39;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '=')
    {//=.==
        pProject++;
        if (resourceProject[pProject] == '=')
        {
            syn = 42;
        }
        else
        {
            pProject--;
            syn = 41;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '!')
    {//!,!=
        pProject++;
        if (resourceProject[pProject] == '=')
        {
            syn = 43;
        }
        else
        {
            pProject--;
            syn = 68;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '&')
    {//&,&&
        pProject++;
        if (resourceProject[pProject] == '&')
        {
            syn = 53;
        }
        else
        {
            pProject--;
            syn = 52;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '|')
    {//|,||
        pProject++;
        if (resourceProject[pProject] == '|')
        {
            syn = 55;
        }
        else
        {
            pProject--;
            syn = 54;
        }
        pProject++;
        return;
    }
    else  if (resourceProject[pProject] == '#')
    {//结束符
        syn = 0;//种别码为0
        return;
    }
    else
    {//不能被以上词法分析识别，则出错。
        printf("error：there is no exist %c \n", ch);
        exit(0);
    }
}


int main()
{
    //打开一个文件，读取其中的源程序
    char resourceProject[maxlength];
    int cC,cG,cJ;
    char token[maxtoken] = { 0 };
    int syn = -1, i,j=0;//初始化
    int pProject = 0;//源程序指针
    cC=cG=cJ=0;
    FILE *fp, *fp1;
    if ((fp = fopen("test.txt", "r")) == NULL)
    {//打开源程序
        cout<<"can't open this file"<<endl;
        exit(0);
    }
    resourceProject[pProject] = fgetc(fp);
    while (resourceProject[pProject] != '#')
    {//将源程序读入resourceProject[]数组
        pProject++;
        resourceProject[pProject] = fgetc(fp);
    }
    pProject++;
    resourceProject[pProject] = '\0';
    fclose(fp);
    cout<<"源程序为:"<<endl;
    cout<<resourceProject<<endl;

    //对源程序进行过滤
    filterResource(resourceProject, pProject);
    cout<<"词法分析之后的程序:"<<endl;
    cout<<resourceProject<<endl;
    pProject = 0;//从头开始读

   if ((fp1 = fopen("compile.txt", "w+")) == NULL)
    {//打开源程序
        cout<<"can't open this file"<<endl;
        exit(0);
    }
    while (syn != 0)
    {
        //启动扫描
        Scanner(syn, resourceProject, token, pProject);
        //cout<<token;
        if (syn == 100)
        {//标识符

            for (i = 0; i<maxnum; i++)
            {//插入标识符表中
                if (strcmp(IDentifierTbl[i], token) == 0)
                {//已在表中
                    break;
                }
               if (strcmp(IDentifierTbl[i], "") == 0)
                {//查找空间
                    strcpy(IDentifierTbl[i], token);
                    j++;
                    break;
                }
            }
            printf("(标识符  ,%s)\n", token);
            fprintf(fp1, "(标识符   ,%s)\n", token);//记录在文件中
        }
        else if (syn >= 1 && syn <= 32)
        {//关键字，种别码为空，数组从0开始
            printf("(%s   ,  --)\n", reserveWord[syn - 1]);
            fprintf(fp1, "(%s   ,  --)\n", reserveWord[syn - 1]);
            cG++;
        }
        else if (syn == 99)
        {//const 常数
            printf("(常数   ,   %s)\n", token);
            fprintf(fp1, "(常数   ,   %s)\n", token);
            cC++;
        }
        else if (syn >= 33 && syn <= 68)
        {//界符运算符
            printf("(%s   ,   --)\n", operatorOrDelimiter[syn - 33]);
            fprintf(fp1, "(%s   ,   --)\n", operatorOrDelimiter[syn - 33]);
            cJ++;
        }

    }
   /* for (i = 0; i<j; i++)
    {//插入标识符表中
        printf("第%d个标识符：  %s\n", i + 1, IDentifierTbl[i]);
        fprintf(fp1, "第%d个标识符：  %s\n", i + 1, IDentifierTbl[i]);
    }*/
    fclose(fp1);
    cout<<"关键字个数:"<<cG<<endl;
    cout<<"常数个数:"<<cC<<endl;
    cout<<"界符个数:"<<cJ<<endl;
     cout<<"标识符个数:"<<j<<endl;
    return 0;
}
